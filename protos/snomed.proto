syntax = "proto3";
package snomed;

option go_package = "snomed";
option java_package = "com.eldrix.terminology.snomedct";
option java_outer_classname = "Protos";
option java_multiple_files = true;

import "google/protobuf/timestamp.proto";

// A Concept represents a SNOMED-CT concept.
// The RF2 release allows multiple duplicate entries per concept identifier to permit versioning.
// As such, we have a compound primary key made up of the concept identifier and the effective time.
// Only one concept with a specified identifier will be active at any time point.
// See https://confluence.ihtsdotools.org/display/DOCRELFMT/3.2.1.+Concept+File+Specification
message Concept {
    int64 id  = 1;                                  // Uniquely identifies the concept.
	google.protobuf.Timestamp effective_time =2;    // Specifies the inclusive date at which the component version's state became the then current valid state of the component
	bool active =3;                                 // Specifies whether the concept was active or inactive from the nominal release date specified by the effectiveTime.
	int64 module_id =4;                             // Identifies the concept version's module. Set to a descendant of 900000000000443000 |Module|within the metadata hierarchy.
 	int64 definition_status_id  =5;                 // Specifies if the concept version is primitive or sufficiently defined. Set to a descendant of 900000000000444006 |Definition status|in the metadata hierarchy.
}

// A Description holds descriptions that describe SNOMED CT concepts.
// A description is used to give meaning to a concept and provide well-understood and standard ways of referring to a concept.
// See https://confluence.ihtsdotools.org/display/DOCRELFMT/3.2.2.+Description+File+Specification
message Description {
    int64 id=1;                                     // Uniquely identifies the description.
	google.protobuf.Timestamp effective_time=2;     // Specifies the inclusive date at which the component version's state became the then current valid state of the component
	bool active = 3;                                // Specifies whether the state of the description was active or inactive from the nominal release date specified by the effectiveTime .
	int64 module_id=4;                              // Identifies the description version's module. Set to a child of 900000000000443000 |Module|within the metadata hierarchy.
	int64 concept_id=5;                             // Identifies the concept to which this description applies. Set to the identifier of a concept in the 138875005 |SNOMED CT Concept| hierarchy within the Concept.
	string language_code=6;                          // Specifies the language of the description text using the two character ISO-639-1 code. Note that this specifies a language level only, not a dialect or country code.
	int64 type_id=7;                                // Identifies whether the description is fully specified name a synonym or other description type. This field is set to a child of 900000000000446008 |Description type|in the Metadata hierarchy.
	string term=8;                                  // The description version's text value, represented in UTF-8 encoding.
	int64 case_significance=9;                      // Identifies the concept enumeration value that represents the case significance of this description version. For example, the term may be completely case sensitive, case insensitive or initial letter case insensitive. This field will be set to a child of 900000000000447004 |Case significance|within the metadata hierarchy.
}

// Relationship defines a relationship between two concepts as a type itself defined as a concept
message Relationship {
    int64 id =1;                                    // Uniquely identifies the relationship.
	google.protobuf.Timestamp effective_time=2;     // Specifies the inclusive date at which the component version's state became the then current valid state of the component
	bool active=3;                                  // Specifies whether the state of the relationship was active or inactive from the nominal release date specified by the effectiveTime field.
	int64 module_id=4;                              // Identifies the relationship version's module. Set to a child of 900000000000443000 |Module|within the metadata hierarchy.
	int64 source_id=5;                              // Identifies the source concept of the relationship version. That is the concept defined by this relationship. Set to the identifier of a concept. in the Concept File.
	int64 destination_id=6;                         // Identifies the concept that is the destination of the relationship version.
	int64 relationship_group=7;                     // Groups together relationship versions that are part of a logically associated relationshipGroup. All active Relationship records with the same relationshipGroup number and sourceId are grouped in this way.
	int64 type_id=8;                                // Identifies the concept that represent the defining attribute (or relationship type) represented by this relationship version.
	int64 characteristic_type_id=9;                 // A concept enumeration value that identifies the characteristic type of the relationship version (i.e. whether the relationship version is defining, qualifying, etc.) This field is set to a descendant of 900000000000449001 |Characteristic type|in the metadata hierarchy.
	int64 modifier_id=10;                           // Ignore. A concept enumeration value that identifies the type of Description Logic (DL) restriction (some, all, etc.).  
}

// ReferenceSet support customization and enhancement of SNOMED CT content. These include representation of subsets,
// language preferences maps for or from other code systems.
// There are multiple reference set types which extend this structure
// In the specification, the referenced component ID can be a SCT identifier or a UUID which is... problematic.
// In this structure, the referenced component ID is a SCT identifier... only. For now.
// Fortunately, in concrete types of reference set ("patterns"), it is made explicit.
message ReferenceSetItem {
	string id=1;                                // A 128 bit unsigned Integer, uniquely identifying the reference set member.
	google.protobuf.Timestamp effective_time=2; // Specifies the inclusive date at which this change becomes effective.
	bool active=3;                              // Specifies whether the member's state was active or inactive from the nominal release date specified by the effectiveTime field.
	int64 module_id=4;                         // Identifies the member version's module. Set to a child of 900000000000443000 |Module| within the metadata hierarchy .
	int64 refset_id=5;                          // Uniquely identifies the reference set that this extension row is part of. Set to a descendant of 900000000000455006 |Reference set| within the metadata hierarchy .
	int64 referenced_component_id=6;            // A reference to the SNOMED CT component to be included in the reference set.
    oneof body {
        RefSetDescriptorReferenceSet refset_descriptor=7;
        SimpleReferenceSet simple=8;
        LanguageReferenceSet language=9;
		SimpleMapReferenceSet simple_map=10;
		ComplexMapReferenceSet complex_map=11;
		AttributeValueReferenceSet attribute_value=12;
		AssociationReferenceSet association=13;
    }
}

// RefSetDescriptorReferenceSet is a type of reference set that provides information about a different reference set
// See https://confluence.ihtsdotools.org/display/DOCRELFMT/4.2.11.+Reference+Set+Descriptor
// It provides the additional structure for a given reference set.
message RefSetDescriptorReferenceSet {
	int64 attribute_description_id =1;          // Specifies the name of an attribute that is used in the reference set to which this descriptor applies.
	int64 attribute_type_id=2;                  // Specifies the data type of this attribute in the reference set to which this descriptor applies.
	uint32 attribute_order=3;                   // An unsigned Integer, providing an ordering for the additional attributes extending the reference set .
}

// SimpleReferenceSet is a simple reference set usable for defining subsets
// See https://confluence.ihtsdotools.org/display/DOCRELFMT/4.2.1.+Simple+Reference+Set
message SimpleReferenceSet {
}

// LanguageReferenceSet is a A 900000000000506000 |Language type reference set| supporting the representation of
// language and dialects preferences for the use of particular descriptions.
// "The most common use case for this type of reference set is to specify the acceptable and preferred terms
// for use within a particular country or region. However, the same type of reference set can also be used to
// represent preferences for use of descriptions in a more specific context such as a clinical specialty,
// organization or department.
//
// No more than one description of a specific description type associated with a single concept may have the acceptabilityId value 900000000000548007 |Preferred|.
// Every active concept should have one preferred synonym in each language.
// This means that a language reference set should assign the acceptabilityId  900000000000548007 |Preferred|  to one  synonym (a  description with  typeId value 900000000000013009 |synonym|) associated with each concept .
// This description is the preferred term for that concept in the specified language or dialect.
// Any  description which is not referenced by an active row in the   reference set is regarded as unacceptable (i.e. not a valid  synonym in the language or  dialect ).
// If a description becomes unacceptable, the relevant language reference set member is inactivated by adding a new row with the same id, the effectiveTime of the the change and the value active=0.
// For this reason there is no requirement for an "unacceptable" value."
// See https://confluence.ihtsdotools.org/display/DOCRELFMT/4.2.4.+Language+Reference+Set
//
message LanguageReferenceSet {
	int64 acceptability_id=1;                   // A subtype of 900000000000511003 |Acceptability| indicating whether the description is acceptable or preferred for use in the specified language or dialect .
}

// SimpleMapReferenceSet is a straightforward one-to-one map between SNOMED-CT concepts and another
// coding system. This is appropriate for simple maps.
// See https://confluence.ihtsdotools.org/display/DOCRELFMT/4.2.9.+Simple+Map+Reference+Set
message SimpleMapReferenceSet {
	string map_target=1;                // The equivalent code in the other terminology, classification or code system.
}


// ComplexMapReferenceSet represents a complex one-to-many map between SNOMED-CT and another
// coding system.
// A 447250001 |Complex map type reference set|enables representation of maps where each SNOMED
// CT concept may map to one or more codes in a target scheme.
// The type of reference set supports the general set of mapping data required to enable a
// target code to be selected at run-time from a number of alternate codes. It supports
// target code selection by accommodating the inclusion of machine readable rules and/or human readable advice.
// An 609331003 |Extended map type reference set|adds an additional field to allow categorization of maps.
message ComplexMapReferenceSet {
	int64 map_group=1;               // An Integer, grouping a set of complex map records from which one may be selected as a target code.
	int64 map_priority=2;            // Within a mapGroup, the mapPriority specifies the order in which complex map records should be checked
	string map_rule=3;              // A machine-readable rule, (evaluating to either 'true' or 'false' at run-time) that indicates whether this map record should be selected within its mapGroup.
	string map_advice=4;             // Human-readable advice, that may be employed by the software vendor to give an end-user advice on selection of the appropriate target code from the alternatives presented to him within the group.
	string map_target=5;             // The target code in the target terminology, classification or code system.
	int64 correlation=6;          // A child of 447247004 |SNOMED CT source code to target map code correlation value|in the metadata hierarchy, identifying the correlation between the SNOMED CT concept and the target code.
	int64 map_category=7;          // Only for extended complex map refsets: Identifies the SNOMED CT concept in the metadata hierarchy which represents the MapCategory for the associated map member.
}

// AttributeValueReferenceSet provides a way to associate arbitrary attributes with a SNOMED-CT component
// See https://confluence.ihtsdotools.org/display/DOCRELFMT/5.2.3+Attribute+Value+Reference+Set
message AttributeValueReferenceSet {
	int64 value_id=1;	//The tagged value applied to the referencedComponentId. A subtype of 900000000000491004 |Attribute value|.
}

// AssociationReferenceSet provides a way to associate one component with another, with meaning
// defined by the refset itself. 
// See https://confluence.ihtsdotools.org/display/DOCRELFMT/5.2.5+Association+Reference+Set
message AssociationReferenceSet {
	int64 target_component_id=1;
}

// ExtendedConcept represents a concept together with 
// sufficient additional contextual information relating to the 
// concept, including reference set membership as well as
// the underlying concept, the concept's relationships and
// the concept's membership of reference sets, and ways that
// this concept can be refined.
// It is, in essence, a denormalised entity, useful for 
// wire-exchange purposes and caching.
message ExtendedConcept {
	Concept concept = 1;
	repeated Relationship relationships = 2;  // (parent) relationships for this concept
	Description preferred_description = 3;		// cached preferred synonym
	repeated int64 recursive_parent_ids = 4;	// list of all (recursive) IS-A parents for concept
	repeated int64 direct_parent_ids = 5; // list of direct IS-A parents for concept
	repeated int64 concept_refsets = 6;	// refsets to which the concept belong
}

// ConceptDescriptions defined the preferred description
// and available synonyms for the concept specified.
message ConceptDescriptions {
	Concept concept = 1;
	Description preferred_description = 2;
	Description fully_specified_name = 3;
	repeated Description synonyms = 4;
	repeated Description definitions = 5;
}

// ExtendedDescription represents a description together with 
// sufficient additional contextual information relating to the 
// description, including reference set membership as well as
// the underlying concept, the concept's relationships and
// the concept's membership of reference sets.
// It is, in essence, a denormalised relationship, useful for 
// wire-exchange purposes.
message ExtendedDescription {
	Description description = 1;
	reserved 2;			// reserved for language of this description
	Concept concept = 3;	// concept to which this description relates
	Description preferred_description = 4; // concept's preferred description
	repeated int64 recursive_parent_ids = 5;	// list of all (recursive) IS-A parents for concept
	repeated int64 direct_parent_ids = 6; // list of direct IS-A parents for concept
	repeated int64 concept_refsets = 7;	// refsets to which the concept belong
	repeated int64 description_refsets = 8; // refsets to which the description belong
}

// ConceptReference is a simple reference to a concept with an optional preferred description included.
message ConceptReference {
	int64 concept_id = 1;
	string term = 2;
}

// Expression represents a compound SNOMED CT expression.
// There would usually only be a single concept and possibly some refinement
// See https://confluence.ihtsdotools.org/display/DOCSCG/Compositional+Grammar+-+Specification+and+Guide
// The ABNF grammar for SNOMED compositional grammar (CG) is available here:
// https://github.com/IHTSDO/SNOMEDCT-Languages/blob/master/SnomedCTCompositionalGrammar/CG%20Syntax/Compositional%20Grammar%20v2%20-%20ABNF%20(Normative).txt
message Expression {

	// A clause is a "subexpression" in the CG grammar, with refinements either flat
	// or nested in groups
	message Clause {
		repeated ConceptReference focus_concepts = 1;	// should all be from same hierarchy
		repeated Refinement refinements = 2;
		repeated RefinementGroup refinement_groups = 3;
	}

	message RefinementGroup {
		repeated Refinement refinements = 1;
	}

	// Refinement is a name/value pair (an attribute) permitting refinement of the focus concept(s)
	// The value can be a concept, a clause, or a concrete value such as a string, integer or double
	message Refinement {
		ConceptReference refinement_concept = 1;	// the "attribute name", must be child of 246061005 (Attribute)
		oneof value {
			ConceptReference concept_value = 2;
			Clause clause_value = 3;	// a subexpression
			string string_value = 4;
			int64 int_value = 5;
			double double_value = 6;
		}
	}

	enum DefinitionStatus {
		EQUIVALENT_TO = 0;		// default, if omitted
		SUBTYPE_OF = 1;
	}	

	DefinitionStatus definition_status = 1;
	Clause clause = 2;
}



// SubsumptionRequest requests a test of subsumption
// This is based on on the HL7 FHIR terminology service definition
// Does concept A subsumes concept B?
// e.g. A:Disorder of liver, B: viral hepatitis. Result: Subsumes
// See https://www.hl7.org/fhir/terminology-service.html
message SubsumptionRequest {
	string system = 1;		// This is ignored, but should be "http://snomed.info/sct"
	int64 code_a = 2;
	int64 code_b = 3;
}

// SubsumptionResponse gives the response of subsumption testing
message SubsumptionResponse {
	Result result = 1;
	enum Result {
		EQUIVALENT = 0;
		SUBSUMES = 1;	// A subsumes B
		SUBSUMED_BY = 2; // B subsumes A
		NOT_SUBSUMED = 3; // not subsumed
	}
}


// RefinementRequest requests the possible refinements 
// for the specified concept.
message RefinementRequest {
	int64 concept_id = 1;		// concept to be refined
	int32 choice_limit = 2;		// include list of choices if the number available is below this count, zero for none.
}

message RefinementResponse {
	Concept concept = 1;
	repeated Refinement refinements = 2;

	message Refinement {
		ConceptReference attribute = 1;	// the type of refinement, eg. laterality
		ConceptReference root_value = 2;		// the parent in the IS-A hierarchy that define value set
		repeated ConceptReference choices = 3; // the actual value set (a list of choices) for the refinement
	}
}


message TranslateFromRequest {
	int64 refset_id = 1;
	string s = 2;
}
message TranslateFromResponse {
	repeated Item translations = 1;

	message Item {
		ReferenceSetItem reference_set_item = 1;
		Concept concept = 2;
	}
}

message TranslateToRequest {
	int64 concept_id = 1;		// source concept identifier
	int64 target_id = 2;	// target reference set. 
}

message ParseRequest {
	string s = 1;		// string to parse
}


// ExtractRequest requests natural language processing entity matching for the specified
// free-text. Requests can include a range of hints specifying specialty and other
// contextual clues, to aid matching.
message ExtractRequest {
	string s = 1;			// string to parse
	repeated int64 hints = 2; // contextual hints, list of concept identifiers
}

// ExtractResponse provides a list of entities from the unstructured text.
// As an individual entity may correspond to multiple concepts (imagine "diabetes" might 
// map to diabetes mellitus, diabetes insipidus etc.), we return multiple concepts
// sorted in order of "best" match, as well as the best match if, algorithmically, we
// are confident of a best match, and a generic match, a generic concept that subsumes 
// the matches found. The latter is most useful when trying to make sense, safely, 
// during non-interactive use. This service will also return complete SNOMED CT expressions
// in the future.
message ExtractResponse {
	message Entity {
		string text = 1;		// text
		double score = 2;		// confidence score
		bool negated = 3;		// is this negated?
		repeated ConceptReference concepts = 4;	// possible matching concepts
		repeated string expressions = 5; // possible matching SNOMED CT expressions
		int64 best_match = 6;		// the best match, algorithmically, if found
		int64 generic_match = 7;		// the generic match for all matching concepts
	}
	repeated Entity entities = 1;
}

// SearchRequest performs a free-text search of the hierarchy.
message SearchRequest {
	string s  = 1; 							// the search string, mandatory
	repeated int64 is_a = 2; 				// limit search to descendents of these parents, default:root
	repeated int64 direct_parents = 3; 		// limit search to direct descendents of these parents, default:none
	repeated int64 concept_refsets = 4; 	// limit search to concepts in the specified reference sets, default: none
	repeated int64 description_refsets = 5;	// limit search to descriptions in the specified reference sets, default: none
	int32 maximum_hits = 6;						// limit for maximum hits, use default if zero
	bool include_inactive = 7;					// search descriptions for inactive concepts, default false
	Fuzzy fuzzy = 8;  							// fuzziness preference, default fallback fuzzy
	repeated int64 hints = 9;		// hints to help search (e.g. context like specialty, location, etc), list of concept identifiers

	enum Fuzzy {
		FALLBACK_FUZZY = 0;			// try a fuzzy match only if there are no results without using fuzzy
		ALWAYS_FUZZY = 1; 			// use fuzzy for the search
		NO_FUZZY = 2;				// do not use fuzzy matching at all
	}
}


// SearchResponse provides an optimised search response, sufficient for display purposes.
message SearchResponse {	
	repeated Item items = 1;

	message Item {
		string term = 1;	// matched term
		int64 concept_id = 2;	// concept identifier
		string preferred_term = 3;	// cached preferred term for this concept
	}
}

// SearchFeedback provides feedback on a search. 
message SearchFeedback {
	SearchRequest request = 1;			// the original search request
	SearchResponse response = 2;		// the search response
	int64 selected_concept = 3;			// what was finally chosen by the user
}

